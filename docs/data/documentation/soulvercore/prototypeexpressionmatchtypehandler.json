{"sections":[],"metadata":{"roleHeading":"Type Alias","symbolKind":"typealias","navigatorTitle":[{"text":"PrototypeExpressionMatchTypeHandler","kind":"identifier"}],"title":"PrototypeExpressionMatchTypeHandler","externalID":"s:11SoulverCore35PrototypeExpressionMatchTypeHandlera","modules":[{"name":"SoulverCore"}],"fragments":[{"text":"typealias","kind":"keyword"},{"text":" ","kind":"text"},{"text":"PrototypeExpressionMatchTypeHandler","kind":"identifier"}],"role":"symbol"},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/app.soulver.core\/documentation\/SoulverCore\/PrototypeExpressionMatchTypeHandler"},"primaryContentSections":[{"declarations":[{"platforms":["macOS"],"languages":["swift"],"tokens":[{"text":"typealias","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"PrototypeExpressionMatchTypeHandler"},{"text":" = (","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:11SoulverCore5TokenV","text":"Token","identifier":"doc:\/\/app.soulver.core\/documentation\/SoulverCore\/Token"},{"kind":"text","text":") -> "},{"text":"PrototypeExpressionMatchType","kind":"typeIdentifier","identifier":"doc:\/\/app.soulver.core\/documentation\/SoulverCore\/PrototypeExpressionMatchType","preciseIdentifier":"s:11SoulverCore28PrototypeExpressionMatchTypeO"}]}],"kind":"declarations"}],"schemaVersion":{"patch":0,"major":0,"minor":3},"seeAlsoSections":[{"generated":true,"title":"Defining new functions","identifiers":["doc:\/\/app.soulver.core\/documentation\/SoulverCore\/PrototypeExpression","doc:\/\/app.soulver.core\/documentation\/SoulverCore\/PrototypePlaceholder","doc:\/\/app.soulver.core\/documentation\/SoulverCore\/PrototypeExpressionGenerator","doc:\/\/app.soulver.core\/documentation\/SoulverCore\/PrototypeExpressionMatchType"]}],"hierarchy":{"paths":[["doc:\/\/app.soulver.core\/documentation\/SoulverCore"]]},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/soulvercore\/prototypeexpressionmatchtypehandler"]}],"abstract":[{"type":"text","text":"A handler where you provide the preferred match type for a given token"}],"kind":"symbol","references":{"doc://app.soulver.core/documentation/SoulverCore/Token":{"kind":"symbol","role":"symbol","url":"\/documentation\/soulvercore\/token","abstract":[{"type":"text","text":"A token represents a meaningful element in a math expression (like a number, operator, unit, etc)"}],"identifier":"doc:\/\/app.soulver.core\/documentation\/SoulverCore\/Token","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"Token"}],"type":"topic","navigatorTitle":[{"kind":"identifier","text":"Token"}],"title":"Token"},"doc://app.soulver.core/documentation/SoulverCore":{"title":"SoulverCore","type":"topic","identifier":"doc:\/\/app.soulver.core\/documentation\/SoulverCore","abstract":[{"type":"text","text":"A powerful natural language calculation engine"}],"url":"\/documentation\/soulvercore","kind":"symbol","role":"collection"},"doc://app.soulver.core/documentation/SoulverCore/PrototypeExpressionMatchType":{"type":"topic","title":"PrototypeExpressionMatchType","kind":"symbol","role":"symbol","url":"\/documentation\/soulvercore\/prototypeexpressionmatchtype","abstract":[{"type":"text","text":"Customize how a placeholder in a prototype expression matches"}],"fragments":[{"text":"enum","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"PrototypeExpressionMatchType"}],"navigatorTitle":[{"text":"PrototypeExpressionMatchType","kind":"identifier"}],"identifier":"doc:\/\/app.soulver.core\/documentation\/SoulverCore\/PrototypeExpressionMatchType"},"doc://app.soulver.core/documentation/SoulverCore/PrototypePlaceholder":{"identifier":"doc:\/\/app.soulver.core\/documentation\/SoulverCore\/PrototypePlaceholder","role":"symbol","abstract":[{"type":"text","text":"A type placeholder must be a single word with two underscores (__thing, __animal, etc)"}],"navigatorTitle":[{"kind":"identifier","text":"PrototypePlaceholder"}],"url":"\/documentation\/soulvercore\/prototypeplaceholder","kind":"symbol","title":"PrototypePlaceholder","type":"topic","fragments":[{"text":"typealias","kind":"keyword"},{"text":" ","kind":"text"},{"text":"PrototypePlaceholder","kind":"identifier"}]},"doc://app.soulver.core/documentation/SoulverCore/PrototypeExpressionMatchTypeHandler":{"kind":"symbol","role":"symbol","type":"topic","title":"PrototypeExpressionMatchTypeHandler","url":"\/documentation\/soulvercore\/prototypeexpressionmatchtypehandler","fragments":[{"text":"typealias","kind":"keyword"},{"text":" ","kind":"text"},{"text":"PrototypeExpressionMatchTypeHandler","kind":"identifier"}],"identifier":"doc:\/\/app.soulver.core\/documentation\/SoulverCore\/PrototypeExpressionMatchTypeHandler","abstract":[{"text":"A handler where you provide the preferred match type for a given token","type":"text"}],"navigatorTitle":[{"text":"PrototypeExpressionMatchTypeHandler","kind":"identifier"}]},"doc://app.soulver.core/documentation/SoulverCore/PrototypeExpression":{"kind":"symbol","role":"symbol","type":"topic","url":"\/documentation\/soulvercore\/prototypeexpression","title":"PrototypeExpression","fragments":[{"text":"typealias","kind":"keyword"},{"text":" ","kind":"text"},{"text":"PrototypeExpression","kind":"identifier"}],"identifier":"doc:\/\/app.soulver.core\/documentation\/SoulverCore\/PrototypeExpression","abstract":[{"text":"A special “regex-like” SoulverCore string format that includes placeholders which represent types of tokens to match","type":"text"}],"navigatorTitle":[{"text":"PrototypeExpression","kind":"identifier"}]},"doc://app.soulver.core/documentation/SoulverCore/PrototypeExpressionGenerator":{"navigatorTitle":[{"text":"PrototypeExpressionGenerator","kind":"identifier"}],"abstract":[{"text":"Generate a SoulverCore prototype expression from the kind of expression you’d input in Soulver","type":"text"}],"identifier":"doc:\/\/app.soulver.core\/documentation\/SoulverCore\/PrototypeExpressionGenerator","role":"symbol","title":"PrototypeExpressionGenerator","kind":"symbol","type":"topic","url":"\/documentation\/soulvercore\/prototypeexpressiongenerator","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"PrototypeExpressionGenerator","kind":"identifier"}]}}}
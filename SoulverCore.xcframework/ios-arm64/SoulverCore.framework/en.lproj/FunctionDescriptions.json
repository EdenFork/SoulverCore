{
  "unitRelated": [
    {
      "identifier": "unitInUnitExpression",
      "prototypeExpressions": [
        "__unit in __unit_expression"
      ]
    },
    {
      "identifier": "substanceWeightToVolumeConversion",
      "prototypeExpressions": [
        "__unit_expression __substance in __unit",
        "__unit_expression of __substance in __unit"
      ]
    },
    {
      "identifier": "densityOfSubstance",
      "prototypeExpressions": [
        "density of __substance",
        "__substance density"
      ]
    },
    {
      "identifier": "unitInTimespan",
      "prototypeExpressions": [
        "__unit in __timespan"
      ]
    },
    {
      "prototypeExpressions": [
        "__rate is what / __unit",
        "__rate is how much / __unit",
        "__rate as / __unit",
        "__rate is what /__unit",
        "__rate is how much /__unit",
        "__rate as /__unit",
        "__rate is what per __unit",
        "__rate is how much per __unit",
        "__rate as per __unit",
        "__rate is what per__unit",
        "__rate is how much per__unit",
        "__rate as per__unit"
      ],
      "identifier": "rateUnitChange"
    }
  ],
  "financial": [
    {
      "identifier": "presentValue",
      "prototypeExpressions": [
        "present value of 1000 after __timespan at __percentage",
        "present value of 1000 over __timespan at __percentage"
      ]
    },
    {
      "identifier": "returnOnInvestmentAfter",
      "prototypeExpressions": [
        "annual return on 500 invested 1000 returned after __timespan",
        "yearly return on 500 invested 1000 returned after __timespan",
        "annual return on 500 invested 1000 returned over __timespan",
        "yearly return on 500 invested 1000 returned over __timespan"
      ]
    },
    {
      "prototypeExpressions": [
        "500 invested 1000 returned"
      ],
      "identifier": "returnOnInvestment"
    },
    {
      "prototypeExpressions": [
        "total repayment on 10000 for __timespan at __percentage",
        "total repayment on 10000 after __timespan at __percentage",
        "total repayment on 10000 over __timespan at __percentage",
        "total payment on 10000 for __timespan at __percentage",
        "total payment on 10000 after __timespan at __percentage",
        "total payment on 10000 over __timespan at __percentage"
      ],
      "identifier": "totalLoanRepayment"
    },
    {
      "identifier": "annualLoanRepayment",
      "prototypeExpressions": [
        "annual repayment on 10000 for __timespan at __percentage",
        "annual repayment on 10000 after __timespan at __percentage",
        "annual repayment on 10000 over __timespan at __percentage",
        "yearly repayment on 10000 over __timespan at __percentage",
        "yearly repayment on 10000 after __timespan at __percentage",
        "yearly repayment on 10000 for __timespan at __percentage",
        "annual payment on 10000 for __timespan at __percentage",
        "annual payment on 10000 after __timespan at __percentage",
        "annual payment on 10000 over __timespan at __percentage",
        "yearly payment on 10000 over __timespan at __percentage",
        "yearly payment on 10000 after __timespan at __percentage",
        "yearly payment on 10000 for __timespan at __percentage"
      ]
    },
    {
      "prototypeExpressions": [
        "monthly repayment on 10000 for __timespan at __percentage",
        "monthly repayment on 10000 after __timespan at __percentage",
        "monthly repayment on 10000 over __timespan at __percentage",
        "monthly payment on 10000 for __timespan at __percentage",
        "monthly payment on 10000 after __timespan at __percentage",
        "monthly payment on 10000 over __timespan at __percentage"
      ],
      "identifier": "monthlyLoanRepayment"
    },
    {
      "identifier": "totalInterestOnLoanRepayment",
      "prototypeExpressions": [
        "total interest on 10000 for __timespan at __percentage",
        "total interest on 10000 after __timespan at __percentage",
        "total interest on 10000 over __timespan at __percentage"
      ]
    },
    {
      "prototypeExpressions": [
        "annual interest on 10000 for __timespan at __percentage",
        "annual interest on 10000 after __timespan at __percentage",
        "annual interest on 10000 over __timespan at __percentage",
        "yearly interest on 10000 over __timespan at __percentage",
        "yearly interest on 10000 after __timespan at __percentage",
        "yearly interest on 10000 for __timespan at __percentage"
      ],
      "identifier": "annualInterestOnLoanRepayment"
    },
    {
      "identifier": "monthlyInterestOnLoanRepayment",
      "prototypeExpressions": [
        "monthly interest on 10000 for __timespan at __percentage",
        "monthly interest on 10000 after __timespan at __percentage",
        "monthly interest on 10000 over __timespan at __percentage"
      ]
    },
    {
      "prototypeExpressions": [
        "100 after __timespan at __percentage",
        "100 for __timespan at __percentage",
        "100 over __timespan at __percentage",
        "100 at __percentage after __timespan",
        "100 at __percentage for __timespan",
        "100 at __percentage over __timespan"
      ],
      "identifier": "compoundInterest"
    }
  ],
  "percentage": [
    {
      "identifier": "percentOf",
      "prototypeExpressions": [
        "__percentage of 100"
      ]
    },
    {
      "identifier": "percentOff",
      "prototypeExpressions": [
        "__percentage off 100"
      ]
    },
    {
      "identifier": "percentOn",
      "prototypeExpressions": [
        "__percentage on 100"
      ]
    },
    {
      "identifier": "isPercentOfWhat",
      "prototypeExpressions": [
        "30 is __percentage of what"
      ]
    },
    {
      "identifier": "isPercentOfWhatClassic",
      "prototypeExpressions": [
        "__percentage of what is 30"
      ]
    },
    {
      "identifier": "isPercentOffWhat",
      "prototypeExpressions": [
        "30 is __percentage off what"
      ]
    },
    {
      "identifier": "isPercentOffWhatClassic",
      "prototypeExpressions": [
        "__percentage off what is 30"
      ]
    },
    {
      "identifier": "isPercentOnWhat",
      "prototypeExpressions": [
        "30 is __percentage on what"
      ]
    },
    {
      "identifier": "isPercentOnWhatClassic",
      "prototypeExpressions": [
        "__percentage on what is 30"
      ]
    },
    {
      "identifier": "isWhatPercentOf",
      "prototypeExpressions": [
        "10 is what % of 20",
        "10 as a % of 20",
        "10 as % of 20"
      ]
    },
    {
      "identifier": "isWhatPercentOff",
      "prototypeExpressions": [
        "10 is what % off 20",
        "10 as a % off 20",
        "10 as % off 20"
      ]
    },
    {
      "identifier": "isWhatPercentOn",
      "prototypeExpressions": [
        "20 is what % on 10",
        "20 as a % on 10",
        "20 as % on 10"
      ]
    },
    {
      "prototypeExpressions": [
        "10 to 20 is what %"
      ],
      "identifier": "xToYIsWhatPercentage"
    }
  ],
  "datetime": [
    {
      "identifier": "calendarUnitBetweenDates",
      "prototypeExpressions": [
        "__unit between __datestamp and __datestamp",
        "__unit from __datestamp to __datestamp",
        "__unit in __datestamp to __datestamp"
      ]
    },
    {
      "identifier": "calendarUnitToDate",
      "prototypeExpressions": [
        "__unit to __datestamp",
        "__unit before __datestamp",
        "__unit until __datestamp",
        "__unit till __datestamp"
      ]
    },
    {
      "prototypeExpressions": [
        "__unit to __datespan",
        "__unit before __datespan",
        "__unit until __datespan",
        "__unit till __datespan"
      ],
      "identifier": "calendarUnitToDatespan"
    },
    {
      "prototypeExpressions": [
        "__unit in __datestamp"
      ],
      "identifier": "calendarUnitInDate"
    },
    {
      "prototypeExpressions": [
        "__unit in __datespan"
      ],
      "identifier": "calendarUnitInDatespan"
    },
    {
      "identifier": "intervalBetweenDates",
      "prototypeExpressions": [
        "__datestamp to __datestamp",
        "difference between __datestamp and __datestamp"
      ]
    },
    {
      "prototypeExpressions": [
        "__unit between __datestamp through __datestamp",
        "__unit from __datestamp through __datestamp",
        "__unit in __datestamp through __datestamp"
      ],
      "identifier": "inclusiveCalendarUnitBetweenDates"
    },
    {
      "prototypeExpressions": [
        "__datestamp through __datestamp"
      ],
      "identifier": "inclusiveIntervalBetweenDates"
    },
    {
      "prototypeExpressions": [
        "__timestamp to __timestamp"
      ],
      "identifier": "intervalBetweenTimestamps"
    },
    {
      "prototypeExpressions": [
        "__unit since __datestamp"
      ],
      "identifier": "calendarUnitSinceDate"
    },
    {
      "identifier": "calendarUnitExpressionAfterDate",
      "prototypeExpressions": [
        "__timespan from __datestamp",
        "__timespan after __datestamp"
      ]
    },
    {
      "identifier": "calendarUnitExpressionBeforeDate",
      "prototypeExpressions": [
        "__timespan before __datestamp"
      ]
    },
    {
      "identifier": "calendarUnitExpressionAgo",
      "prototypeExpressions": [
        "__timespan ago"
      ]
    },
    {
      "identifier": "generateTimestamp",
      "prototypeExpressions": [
        "new timestamp"
      ]
    },
    {
      "prototypeExpressions": [
        "__timezone time",
        "time __timezone",
        "time at __timezone",
        "time in __timezone"
      ],
      "identifier": "timeInTimezone"
    },
    {
      "identifier": "differenceBetweenTimezones",
      "prototypeExpressions": [
        "time difference between __timezone and __timezone",
        "difference between __timezone and __timezone",
        "time difference between __timezone & __timezone",
        "difference between __timezone & __timezone"
      ]
    },
    {
      "prototypeExpressions": [
        "__datestamp in __timespan",
        "__datestamp after __timespan"
      ],
      "identifier": "weekdayAfterTimespan"
    },
    {
      "prototypeExpressions": [
        "week number on __datestamp",
        "week number __datestamp"
      ],
      "identifier": "weekNumberOnDate"
    },
    {
      "identifier": "halfwayBetweenDates",
      "prototypeExpressions": [
        "halfway between __datestamp and __datestamp",
        "midpoint between __datestamp and __datestamp"
      ]
    }
  ],
  "general": [
    {
      "identifier": "remainder",
      "prototypeExpressions": [
        "remainder of 20 divided by 3"
      ]
    },
    {
      "identifier": "halfOf",
      "prototypeExpressions": [
        "half of 20"
      ]
    },
    {
      "identifier": "lesserOf",
      "prototypeExpressions": [
        "smaller of 2 and 30",
        "lesser of 2 and 30"
      ]
    },
    {
      "identifier": "greaterOf",
      "prototypeExpressions": [
        "larger of 2 and 30",
        "greater of 2 and 30"
      ]
    },
    {
      "identifier": "midpoint",
      "prototypeExpressions": [
        "midpoint between 2 and 32"
      ]
    },
    {
      "identifier": "lcm",
      "prototypeExpressions": [
        "lcm of 5 and 8",
        "lowest common multiple of 5 and 8"
      ]
    },
    {
      "identifier": "gcd",
      "prototypeExpressions": [
        "gcd of 20 and 30",
        "greatest common divisor of 5 and 8",
        "gcf of 20 and 30",
        "greatest common factor of 5 and 8"
      ]
    },
    {
      "identifier": "proportionsFindNumerator",
      "prototypeExpressions": [
        "6 is to 600 as what is to 8",
        "6 to 600 is what to 8",
        "6 to 600 as what to 8"
      ]
    },
    {
      "identifier": "proportionsFindDenominator",
      "prototypeExpressions": [
        "6 is to 600 as 8 is to what",
        "6 to 600 as 8 to what",
        "6 to 600 is 8 to what"
      ]
    },
    {
      "identifier": "makeRandomNumber",
      "prototypeExpressions": [
        "random number between 1 and 5",
        "random between 1 and 5"
      ]
    },
    {
      "identifier": "asMultiplierOf",
      "prototypeExpressions": [
        "5 as multiplier of 1",
        "5 as multiple of 1",
        "5 as a multiplier of 1",
        "5 as a multiple of 1",
        "5 as x of 1",
        "5 is what x of 1",
        "5 is what multiple of 1",
        "5 is what multiplier of 1"
      ]
    },
    {
      "identifier": "squareRoot",
      "prototypeExpressions": [
        "square root of 100",
        "square root 100"
      ]
    },
    {
      "identifier": "cubedRoot",
      "prototypeExpressions": [
        "cubed root of 100",
        "cubed root 100"
      ]
    },
    {
      "identifier": "nthRoot",
      "prototypeExpressions": [
        "5 root of 100",
        "root 5 of 100"
      ]
    },
    {
      "identifier": "nthLog",
      "prototypeExpressions": [
        "log 20 base 4",
        "log of 20 to base 4",
        "log of 20 with base 4",
        "logarithm 20 base 4",
        "logarithm of 20 to base 4",
        "logarithm of 20 with base 4"
      ]
    }
  ],
  "tagRelated": [
    {
      "identifier": "tagTotal",
      "prototypeExpressions": [
        "total of __tag",
        "total __tag",
        "__tag total",
        "sum of __tag",
        "sum __tag",
        "__tag sum"
      ]
    },
    {
      "identifier": "tagAverage",
      "prototypeExpressions": [
        "average of __tag",
        "average __tag",
        "__tag average",
        "mean of __tag",
        "mean __tag",
        "__tag mean"
      ]
    },
    {
      "identifier": "tagCount",
      "prototypeExpressions": [
        "count of __tag",
        "count __tag",
        "__tag count"
      ]
    }
  ]
}

{
  "financial": [
    {
      "identifier": "presentValue",
      "prototypeExpressions": [
        "valeur actualisée de 1000 après __timespan à __percentage",
        "valeur actualisée de 1000 sur __timespan à __percentage"
      ]
    },
    {
      "identifier": "returnOnInvestmentAfter",
      "prototypeExpressions": [
        "retour annuel de 500 investi 1000 retiré après __timespan",
        "retour annualisé de 500 investi 1000 retiré après __timespan",
        "retour annuel de 500 investi 1000 retiré sur __timespan",
        "retour annualisé de 500 investi 1000 retiré sur __timespan"
      ]
    },
    {
      "prototypeExpressions": [
        "500 investi 1000 retiré"
      ],
      "identifier": "returnOnInvestment"
    },
    {
      "prototypeExpressions": [
        "remboursement total de 10000 pour __timespan à __percentage",
        "remboursement total de 10000 après __timespan à __percentage",
        "remboursement total de 10000 sur __timespan à __percentage",
        "paiement total de 10000 pour __timespan à __percentage",
        "paiement total de 10000 après __timespan à __percentage",
        "paiement total de 10000 sur __timespan à __percentage"
      ],
      "identifier": "totalLoanRepayment"
    },
    {
      "identifier": "annualLoanRepayment",
      "prototypeExpressions": [
        "remboursement annuel de 10000 pour __timespan à __percentage",
        "remboursement annuel de 10000 après __timespan à __percentage",
        "remboursement annuel de 10000 sur __timespan à __percentage",
        "paiement annuel de 10000 pour __timespan à __percentage",
        "paiement annuel de 10000 après __timespan à __percentage",
        "paiement annuel de 10000 sur __timespan à __percentage"
      ]
    },
    {
      "prototypeExpressions": [
        "remboursement mensuel de 10000 pour __timespan à __percentage",
        "remboursement mensuel de 10000 après __timespan à __percentage",
        "remboursement mensuel de 10000 sur __timespan à __percentage",
        "remboursement par mois de 10000 pour __timespan à __percentage",
        "remboursement par mois de 10000 après __timespan à __percentage",
        "remboursement par mois de 10000 sur __timespan à __percentage",
        "paiement mensuel de 10000 pour __timespan à __percentage",
        "paiement mensuel de 10000 après __timespan à __percentage",
        "paiement mensuel de 10000 sur __timespan à __percentage",
        "paiement par mois de 10000 pour __timespan à __percentage",
        "paiement par mois de 10000 après __timespan à __percentage",
        "paiement par mois de 10000 sur __timespan à __percentage"
      ],
      "identifier": "monthlyLoanRepayment"
    },
    {
      "identifier": "totalInterestOnLoanRepayment",
      "prototypeExpressions": [
        "intérêt total sur 10000 pour __timespan à __percentage",
        "intérêt total sur 10000 après __timespan à __percentage",
        "intérêt total sur 10000 sur __timespan à __percentage",
        "intérêt total de 10000 pour __timespan à __percentage",
        "intérêt total de 10000 après __timespan à __percentage",
        "intérêt total de 10000 sur __timespan à __percentage"
      ]
    },
    {
      "prototypeExpressions": [
        "intérêt annuel sur 10000 pour __timespan à __percentage",
        "intérêt annuel sur 10000 après __timespan à __percentage",
        "intérêt annuel sur 10000 sur __timespan à __percentage",
        "intérêt par année sur 10000 pour __timespan à __percentage",
        "intérêt par année sur 10000 après __timespan à __percentage",
        "intérêt par année sur 10000 sur __timespan à __percentage"
      ],
      "identifier": "annualInterestOnLoanRepayment"
    },
    {
      "identifier": "monthlyInterestOnLoanRepayment",
      "prototypeExpressions": [
        "intérêt mensuel sur 10000 pour __timespan à __percentage",
        "intérêt mensuel sur 10000 après __timespan à __percentage",
        "intérêt mensuel sur 10000 sur __timespan à __percentage",
        "intérêt mensuel de 10000 pour __timespan à __percentage",
        "intérêt mensuel de 10000 après __timespan à __percentage",
        "intérêt mensuel de 10000 sur __timespan à __percentage",
        "intérêt par mois sur 10000 pour __timespan à __percentage",
        "intérêt par mois sur 10000 après __timespan à __percentage",
        "intérêt par mois sur 10000 sur __timespan à __percentage",
        "intérêt par mois de 10000 pour __timespan à __percentage",
        "intérêt par mois de 10000 après __timespan à __percentage",
        "intérêt par mois de 10000 sur __timespan à __percentage"
      ]
    },
    {
      "prototypeExpressions": [
        "100 après __timespan à __percentage composé mensuellement",
        "100 pour __timespan à __percentage composé mensuellement",
        "100 sur __timespan à __percentage composé mensuellement",
        "100 à __percentage après __timespan composé mensuellement",
        "100 à __percentage pour __timespan composé mensuellement",
        "100 à __percentage sur __timespan composé mensuellement",
        "100 après __timespan à __percentage composé mensuellement",
        "100 pour __timespan à __percentage composé mensuellement",
        "100 sur __timespan à __percentage composé mensuellement",
        "100 à __percentage après __timespan composé mensuellement",
        "100 à __percentage pour __timespan composé mensuellement",
        "100 à __percentage sur __timespan composé mensuellement"
      ],
      "identifier": "compoundInterestCompoundingMonthly"
    },
    {
      "prototypeExpressions": [
        "100 après __timespan à __percentage",
        "100 pour __timespan à __percentage",
        "100 sur __timespan à __percentage",
        "100 à __percentage après __timespan",
        "100 à __percentage pour __timespan",
        "100 à __percentage sur __timespan"
      ],
      "identifier": "compoundInterest"
    }
  ],
  "percentage": [
    {
      "identifier": "percentOf",
      "prototypeExpressions": [
        "__percentage de 100"
      ]
    },
    {
      "identifier": "percentOff",
      "prototypeExpressions": [
        "__percentage de réduction sur 100"
      ]
    },
    {
      "identifier": "percentOn",
      "prototypeExpressions": [
        "__percentage sur 100"
      ]
    },
    {
      "identifier": "isPercentOfWhat",
      "prototypeExpressions": [
        "30 donne __percentage de quoi",
        "30 donne __percentage de combien"
      ]
    },
    {
      "identifier": "isPercentOfWhatClassic",
      "prototypeExpressions": [
        "__percentage de quoi donne 30",
        "__percentage de combien donne 30"
      ]
    },
    {
      "identifier": "isPercentOffWhat",
      "prototypeExpressions": [
        "30 donne __percentage de réduction sur combien",
        "30 donne __percentage de réduction sur quoi"
      ]
    },
    {
      "identifier": "isPercentOffWhatClassic",
      "prototypeExpressions": [
        "__percentage de réduction sur combien donne 30"
      ]
    },
    {
      "identifier": "isPercentOnWhat",
      "prototypeExpressions": [
        "30 donne __percentage sur combien",
        "30 donne __percentage sur quoi"
      ]
    },
    {
      "identifier": "isPercentOnWhatClassic",
      "prototypeExpressions": [
        "__percentage sur combien donne 30"
      ]
    },
    {
      "identifier": "isWhatPercentOf",
      "prototypeExpressions": [
        "10 est combien de % sur 20",
        "10 comme % sur 20",
        "10 en tant que % sur 20"
      ]
    },
    {
      "identifier": "isWhatPercentOff",
      "prototypeExpressions": [
        "10 représente combien de % de réduction sur 20",
        "10 est combien de % de réduction sur 20",
        "10 comme % de réduction sur 20",
        "10 en tant que % de réduction sur 20"
      ]
    },
    {
      "identifier": "isWhatPercentOn",
      "prototypeExpressions": [
        "20 donne quel % sur 10",
        "20 comme % sur 10",
        "20 en tant que % sur 10"
      ]
    },
    {
      "prototypeExpressions": [
        "10 sur 20 donne quel %",
        "10 sur 20 comme %",
        "10 sur 20 en tant que %",
        "10 sur 20 sous forme de %",
        "10 sur 20 donne combien de pourcents",
        "10 sur 20 comme pourcents",
        "10 sur 20 en tant que pourcents",
        "10 sur 20 sous forme de pourcents",
        "10 sur 20 donne quel pourcentage",
        "10 sur 20 comme pourcentage",
        "10 sur 20 sous forme de pourcentage",
        "10 sur 20 en tant que pourcentage"
      ],
      "identifier": "xToYIsWhatPercentage"
    },
    {
      "prototypeExpressions": [
        "10 sur 20 donne quel x",
        "10 sur 20 comme x",
        "10 sur 20 en tant que x",
        "10 sur 20 donne quel multiple",
        "10 sur 20 comme multiple",
        "10 sur 20 en tant que multiple",
        "10 sur 20 donne quel multiplicateur",
        "10 sur 20 comme multiplicateur",
        "10 sur 20 en tant que multiplicateur"
      ],
      "identifier": "xToYIsWhatMultiplier"
    }
  ],
  "statistics": [
    {
      "identifier": "statisticOfList",
      "prototypeExpressions": [
        "__statistic_type de __list",
        "__statistic_type __list"
      ]
    },
    {
      "identifier": "statisticOfTag",
      "prototypeExpressions": [
        "__statistic_type de __tag",
        "__statistic_type __tag",
        "__tag __statistic_type"
      ]
    }
  ],
  "datetime": [
    {
      "identifier": "calendarUnitBetweenDates",
      "prototypeExpressions": [
        "__unit entre __datestamp et __datestamp",
        "__unit entre __datestamp à __datestamp",
        "__unit entre __datestamp - __datestamp",
        "__unit entre __datestamp − __datestamp",
        "__unit de __datestamp à __datestamp"
      ]
    },
    {
      "identifier": "calendarUnitToDate",
      "prototypeExpressions": [
        "__unit jusqu'au __datestamp",
        "__unit d'ici au __datestamp",
        "__unit jusqu'à __datestamp",
        "__unit avant __datestamp"
      ]
    },
    {
      "prototypeExpressions": [
        "__unit avant __datespan",
        "__unit jusqu'à __datespan"
      ],
      "identifier": "calendarUnitToDatespan"
    },
    {
      "prototypeExpressions": [
        "__unit le __datestamp"
      ],
      "identifier": "calendarUnitInDate"
    },
    {
      "prototypeExpressions": [
        "__unit dans __datespan"
      ],
      "identifier": "calendarUnitInDatespan"
    },
    {
      "identifier": "intervalBetweenDates",
      "prototypeExpressions": [
        "__datestamp au __datestamp",
        "différence entre __datestamp et __datestamp"
      ]
    },
    {
      "prototypeExpressions": [
        "__unit entre __datestamp jusqu'au __datestamp",
        "__unit du __datestamp jusqu'au __datestamp",
        "__unit de __datestamp jusqu'au __datestamp"
      ],
      "identifier": "inclusiveCalendarUnitBetweenDates"
    },
    {
      "prototypeExpressions": [
        "__datestamp jusqu'au __datestamp"
      ],
      "identifier": "inclusiveIntervalBetweenDates"
    },
    {
      "prototypeExpressions": [
        "__timestamp à __timestamp"
      ],
      "identifier": "intervalBetweenTimestamps"
    },
    {
      "prototypeExpressions": [
        "__unit depuis __datestamp"
      ],
      "identifier": "calendarUnitSinceDate"
    },
    {
      "identifier": "calendarUnitExpressionAfterDate",
      "prototypeExpressions": [
        "__timespan à partir du __datestamp",
        "__timespan après le __datestamp"
      ]
    },
    {
      "identifier": "calendarUnitExpressionBeforeDate",
      "prototypeExpressions": [
        "__timespan avant __datestamp"
      ]
    },
    {
      "identifier": "calendarUnitExpressionAgo",
      "prototypeExpressions": [
        "__timespan depuis"
      ]
    },
    {
      "identifier": "generateTimestamp",
      "prototypeExpressions": [
        "temps présent",
        "nouvel horodatage",
        "horodatage courant"
      ]
    },
    {
      "prototypeExpressions": [
        "__timezone temps",
        "temps __timezone",
        "temps à __timezone"
      ],
      "identifier": "timeInTimezone"
    },
    {
      "identifier": "differenceBetweenTimezones",
      "prototypeExpressions": [
        "différence de temps entre __timezone et __timezone",
        "différence entre __timezone et __timezone",
        "différence de temps entre __timezone & __timezone",
        "différence entre __timezone & __timezone"
      ]
    },
    {
      "prototypeExpressions": [
        "__datestamp après __timespan"
      ],
      "identifier": "weekdayAfterTimespan"
    },
    {
      "prototypeExpressions": [
        "numéro de semaine le __datestamp",
        "semaine du __datestamp"
      ],
      "identifier": "weekNumberOnDate"
    },
    {
      "prototypeExpressions": [
        "semaine de l'année"
      ],
      "identifier": "weekOfYear"
    },
    {
      "identifier": "halfwayBetweenDates",
      "prototypeExpressions": [
        "mi-chemin entre __datestamp et __datestamp",
        "moitié chemin entre __datestamp et __datestamp",
        "à mi-chemin entre __datestamp et __datestamp",
        "milieu entre __datestamp et __datestamp"
      ]
    }
  ],
  "general": [
    {
      "identifier": "remainder",
      "prototypeExpressions": [
        "restant de 20 divisé par 3"
      ]
    },
    {
      "identifier": "halfOf",
      "prototypeExpressions": [
        "moitié de 20"
      ]
    },
    {
      "identifier": "lesserOf",
      "prototypeExpressions": [
        "plus petite entre 2 et 30"
      ]
    },
    {
      "identifier": "greaterOf",
      "prototypeExpressions": [
        "plus grand entre 2 et 30"
      ]
    },
    {
      "identifier": "midpoint",
      "prototypeExpressions": [
        "milieu entre 2 et 32",
        "mi-chemin entre 2 et 32",
        "moitié chemin entre 2 et 32"
      ]
    },
    {
      "identifier": "lcm",
      "prototypeExpressions": [
        "ppcm de 5 et 8",
        "plus petit commun multiple de 5 et 8"
      ]
    },
    {
      "identifier": "gcd",
      "prototypeExpressions": [
        "pgcd de 20 et 30",
        "plus grand commun diviseur de 5 et 8",
        "pgcd de 20 et 30",
        "plus grand facteur commun de 5 et 8"
      ]
    },
    {
      "identifier": "proportionsFindNumerator",
      "prototypeExpressions": [
        "6 est sur 600 ce que combien est sur 8",
        "6 sur 600 représente combien sur 8",
        "6 sur 600 donne combien sur 8"
      ]
    },
    {
      "identifier": "proportionsFindDenominator",
      "prototypeExpressions": [
        "6 est sur 600 ce que 8 est sur combien",
        "6 sur 600 représente 8 sur combien",
        "6 sur 600 donne 8 sur combien"
      ]
    },
    {
      "identifier": "makeRandomNumber",
      "prototypeExpressions": [
        "nombre aléatoire entre 1 et 5",
        "aléatoire entre 1 et 5"
      ]
    },
    {
      "identifier": "squareRoot",
      "prototypeExpressions": [
        "racine carrée de 100",
        "racine carrée 100"
      ]
    },
    {
      "identifier": "cubedRoot",
      "prototypeExpressions": [
        "racine cubique de 100",
        "racine cubique 100"
      ]
    },
    {
      "identifier": "nthRoot",
      "prototypeExpressions": [
        "5 racine de 100",
        "racine 5 de 100"
      ]
    },
    {
      "identifier": "nthLog",
      "prototypeExpressions": [
        "log 20 base 4",
        "log de 20 sur base 4",
        "log de 20 avec base 4",
        "logarithme 20 base 4",
        "logarithme de 20 sur base 4",
        "logarithme de 20 avec base 4"
      ]
    },
    {
      "identifier": "scrubNumberWithSpecifiedRange",
      "prototypeExpressions": [
        "sélection 10 de 0 à 10",
        "sélectionner 10 de 0 à 10",
        "sélection 10 entre 0 et 10",
        "sélectionner 10 entre 0 et 10"
      ]
    },
    {
      "identifier": "xToY",
      "prototypeExpressions": [
        "5 sur 10"
      ]
    }
  ],
  "unitRelated": [
    {
      "identifier": "unitInUnitExpression",
      "prototypeExpressions": [
        "__unit in __unit_expression"
      ]
    },
    {
      "identifier": "substanceWeightToVolumeConversion",
      "prototypeExpressions": [
        "__unit_expression __substance in __unit",
        "__unit_expression of __substance in __unit",
        "__unit_expression __substance as __unit",
        "__unit_expression of __substance as __unit",
        "__unit_expression __substance to __unit",
        "__unit_expression of __substance to __unit"
      ]
    },
    {
      "identifier": "densityOfSubstance",
      "prototypeExpressions": [
        "densité de __substance",
        "__substance densité"
      ]
    },
    {
      "identifier": "unitInTimespan",
      "prototypeExpressions": [
        "__unit dans __timespan"
      ]
    },
    {
      "prototypeExpressions": [
        "__rate donne quoi / __unit",
        "__rate donne combien / __unit",
        "__rate donne quoi /__unit",
        "__rate donne combien /__unit",
        "__rate donne quoi par __unit",
        "__rate donne combien par __unit",
        "__rate donne quoi par__unit",
        "__rate donne combien par__unit"
      ],
      "identifier": "rateUnitChange"
    }
  ]
}

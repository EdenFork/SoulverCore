{
  "datetime": [
    {
      "identifier": "calendarUnitBetweenDates",
      "prototypeExpressions": [
        "__unit between __datestamp and __datestamp",
        "__unit between __datestamp to __datestamp",
        "__unit between __datestamp - __datestamp",
        "__unit between __datestamp âˆ’ __datestamp",
        "__unit from __datestamp to __datestamp",
        "__unit in __datestamp to __datestamp"
      ]
    },
    {
      "identifier": "calendarUnitToDate",
      "prototypeExpressions": [
        "__unit to __datestamp",
        "__unit before __datestamp",
        "__unit until __datestamp",
        "__unit till __datestamp"
      ]
    },
    {
      "prototypeExpressions": [
        "__unit to __datespan",
        "__unit before __datespan",
        "__unit until __datespan",
        "__unit till __datespan"
      ],
      "identifier": "calendarUnitToDatespan"
    },
    {
      "prototypeExpressions": [
        "__unit in __datestamp"
      ],
      "identifier": "calendarUnitInDate"
    },
    {
      "prototypeExpressions": [
        "__unit in __datespan"
      ],
      "identifier": "calendarUnitInDatespan"
    },
    {
      "identifier": "intervalBetweenDates",
      "prototypeExpressions": [
        "__datestamp to __datestamp",
        "difference between __datestamp and __datestamp"
      ]
    },
    {
      "prototypeExpressions": [
        "__unit between __datestamp through __datestamp",
        "__unit from __datestamp through __datestamp",
        "__unit in __datestamp through __datestamp"
      ],
      "identifier": "inclusiveCalendarUnitBetweenDates"
    },
    {
      "prototypeExpressions": [
        "__datestamp through __datestamp"
      ],
      "identifier": "inclusiveIntervalBetweenDates"
    },
    {
      "prototypeExpressions": [
        "__timestamp to __timestamp"
      ],
      "identifier": "intervalBetweenTimestamps"
    },
    {
      "prototypeExpressions": [
        "__laptime to __laptime"
      ],
      "identifier": "intervalBetweenLaptimes"
    },
    {
      "prototypeExpressions": [
        "__frames from __frametime to __frametime",
        "__frames between __frametime and __frametime",
        "__frames in __frametime to __frametime"
      ],
      "identifier": "framesBetweenFrametimes"
    },
    {
      "prototypeExpressions": [
        "__frametime to __frametime"
      ],
      "identifier": "intervalBetweenFrametimes"
    },
    {
      "prototypeExpressions": [
        "__unit since __datestamp"
      ],
      "identifier": "calendarUnitSinceDate"
    },
    {
      "identifier": "calendarUnitExpressionAfterDate",
      "prototypeExpressions": [
        "__timespan from __datestamp",
        "__timespan after __datestamp"
      ]
    },
    {
      "identifier": "calendarUnitExpressionBeforeDate",
      "prototypeExpressions": [
        "__timespan before __datestamp"
      ]
    },
    {
      "identifier": "calendarUnitExpressionAgo",
      "prototypeExpressions": [
        "__timespan ago"
      ]
    },
    {
      "identifier": "generateTimestamp",
      "prototypeExpressions": [
        "new timestamp",
        "current timestamp"
      ]
    },
    {
      "prototypeExpressions": [
        "__timezone time",
        "time __timezone",
        "time at __timezone",
        "time in __timezone"
      ],
      "identifier": "timeInTimezone"
    },
    {
      "identifier": "dateInTimezone",
      "prototypeExpressions": [
        "__timezone date",
        "date __timezone",
        "date at __timezone",
        "date in __timezone"
      ]
    },
    {
      "identifier": "differenceBetweenTimezones",
      "prototypeExpressions": [
        "time difference between __timezone and __timezone",
        "difference between __timezone and __timezone",
        "time difference between __timezone & __timezone",
        "difference between __timezone & __timezone"
      ]
    },
    {
      "prototypeExpressions": [
        "__datestamp in __timespan",
        "__datestamp after __timespan"
      ],
      "identifier": "weekdayAfterTimespan"
    },
    {
      "prototypeExpressions": [
        "week number on __datestamp",
        "week number __datestamp",
        "week of year on __datestamp"
      ],
      "identifier": "weekNumberOnDate"
    },
    {
      "prototypeExpressions": [
        "week of year"
      ],
      "identifier": "weekOfYear"
    },
    {
      "identifier": "halfwayBetweenDates",
      "prototypeExpressions": [
        "halfway between __datestamp and __datestamp",
        "midpoint between __datestamp and __datestamp"
      ]
    },
    {
      "prototypeExpressions": [
        "day of the week on __datestamp",
        "day of week on __datestamp",
        "__duration on __datestamp",
        "__duration on __datestamp"
      ],
      "identifier": "dayOfWeekOnDate"
    }
  ],
  "videoRelated": [
    {
      "identifier": "formFrametime",
      "prototypeExpressions": [
        "__frametime at __frameRate_expression",
        "__laptime at __frameRate_expression",
        "__timespan at __frameRate_expression",
        "__frametime @ __frameRate_expression",
        "__laptime @ __frameRate_expression",
        "__timespan @ __frameRate_expression",
        "__frametime at __rate",
        "__laptime at __rate"
      ]
    },
    {
      "identifier": "framesToFrametime",
      "prototypeExpressions": [
        "__frames_expression at __frameRate_expression",
        "__frames_expression at __rate",
        "__frames_expression @ __frameRate_expression",
        "__frames_expression @ __rate"
      ]
    }
  ],
  "financial": [
    {
      "identifier": "presentValue",
      "prototypeExpressions": [
        "present value of 1000 after __timespan at __percentage",
        "present value of 1000 over __timespan at __percentage"
      ]
    },
    {
      "identifier": "returnOnInvestmentAfter",
      "prototypeExpressions": [
        "annual return on 500 invested 1000 returned after __timespan",
        "yearly return on 500 invested 1000 returned after __timespan",
        "annual return on 500 invested 1000 returned over __timespan",
        "yearly return on 500 invested 1000 returned over __timespan"
      ]
    },
    {
      "prototypeExpressions": [
        "500 invested 1000 returned"
      ],
      "identifier": "returnOnInvestment"
    },
    {
      "prototypeExpressions": [
        "total repayment on 10000 for __timespan at __percentage",
        "total repayment on 10000 after __timespan at __percentage",
        "total repayment on 10000 over __timespan at __percentage",
        "total payment on 10000 for __timespan at __percentage",
        "total payment on 10000 after __timespan at __percentage",
        "total payment on 10000 over __timespan at __percentage"
      ],
      "identifier": "totalLoanRepayment"
    },
    {
      "identifier": "annualLoanRepayment",
      "prototypeExpressions": [
        "annual repayment on 10000 for __timespan at __percentage",
        "annual repayment on 10000 after __timespan at __percentage",
        "annual repayment on 10000 over __timespan at __percentage",
        "yearly repayment on 10000 over __timespan at __percentage",
        "yearly repayment on 10000 after __timespan at __percentage",
        "yearly repayment on 10000 for __timespan at __percentage",
        "annual payment on 10000 for __timespan at __percentage",
        "annual payment on 10000 after __timespan at __percentage",
        "annual payment on 10000 over __timespan at __percentage",
        "yearly payment on 10000 over __timespan at __percentage",
        "yearly payment on 10000 after __timespan at __percentage",
        "yearly payment on 10000 for __timespan at __percentage"
      ]
    },
    {
      "prototypeExpressions": [
        "monthly repayment on 10000 for __timespan at __percentage",
        "monthly repayment on 10000 after __timespan at __percentage",
        "monthly repayment on 10000 over __timespan at __percentage",
        "monthly payment on 10000 for __timespan at __percentage",
        "monthly payment on 10000 after __timespan at __percentage",
        "monthly payment on 10000 over __timespan at __percentage"
      ],
      "identifier": "monthlyLoanRepayment"
    },
    {
      "identifier": "totalInterestOnLoanRepayment",
      "prototypeExpressions": [
        "total interest on 10000 for __timespan at __percentage",
        "total interest on 10000 after __timespan at __percentage",
        "total interest on 10000 over __timespan at __percentage"
      ]
    },
    {
      "prototypeExpressions": [
        "annual interest on 10000 for __timespan at __percentage",
        "annual interest on 10000 after __timespan at __percentage",
        "annual interest on 10000 over __timespan at __percentage",
        "yearly interest on 10000 over __timespan at __percentage",
        "yearly interest on 10000 after __timespan at __percentage",
        "yearly interest on 10000 for __timespan at __percentage"
      ],
      "identifier": "annualInterestOnLoanRepayment"
    },
    {
      "identifier": "monthlyInterestOnLoanRepayment",
      "prototypeExpressions": [
        "monthly interest on 10000 for __timespan at __percentage",
        "monthly interest on 10000 after __timespan at __percentage",
        "monthly interest on 10000 over __timespan at __percentage"
      ]
    },
    {
      "prototypeExpressions": [
        "100 after __timespan at __percentage compounded monthly",
        "100 for __timespan at __percentage compounded monthly",
        "100 over __timespan at __percentage compounded monthly",
        "100 at __percentage after __timespan compounded monthly",
        "100 at __percentage for __timespan compounded monthly",
        "100 at __percentage over __timespan compounded monthly",
        "100 after __timespan at __percentage compounding monthly",
        "100 for __timespan at __percentage compounding monthly",
        "100 over __timespan at __percentage compounding monthly",
        "100 at __percentage after __timespan compounding monthly",
        "100 at __percentage for __timespan compounding monthly",
        "100 at __percentage over __timespan compounding monthly"
      ],
      "identifier": "compoundInterestCompoundingMonthly"
    },
    {
      "prototypeExpressions": [
        "100 after __timespan at __percentage",
        "100 for __timespan at __percentage",
        "100 over __timespan at __percentage",
        "100 at __percentage after __timespan",
        "100 at __percentage for __timespan",
        "100 at __percentage over __timespan"
      ],
      "identifier": "compoundInterest"
    },
    {
      "prototypeExpressions": [
        "500 from __datestamp is worth what __datestamp",
        "500 in __datestamp is worth what __datestamp",
        "500 from __datestamp is worth what in __datestamp",
        "500 in __datestamp is worth what in __datestamp",
        "what is 500 __datestamp worth in __datestamp",
        "what is 500 in __datestamp worth in __datestamp",
        "what is 500 from __datestamp worth in __datestamp",
        "what is 500 __datestamp worth __datestamp",
        "what is 500 in __datestamp worth __datestamp",
        "what is 500 from __datestamp worth __datestamp"
      ],
      "identifier": "dollarWorthAdjustedForInflation"
    },
    {
      "prototypeExpressions": [
        "what will 500 be worth in __datestamp with __percentage inflation",
        "what will 500 be worth in __datestamp given __percentage inflation",
        "what will 500 be worth in __datestamp assuming __percentage inflation",
        "what will 500 be worth in __datestamp at __percentage inflation",
        "value of 500 in __datestamp with __percentage inflation",
        "value of 500 in __datestamp given __percentage inflation",
        "value of 500 in __datestamp assuming __percentage inflation",
        "value of 500 in __datestamp at __percentage inflation",
        "purchasing power of 500 in __datestamp with __percentage inflation",
        "purchasing power of 500 in __datestamp given __percentage inflation",
        "purchasing power of 500 in __datestamp assuming __percentage inflation",
        "purchasing power of 500 in __datestamp at __percentage inflation"
      ],
      "identifier": "predictedDollarWorthGivenInflation"
    }
  ],
  "general": [
    {
      "identifier": "remainder",
      "prototypeExpressions": [
        "remainder of 20 divided by 3"
      ]
    },
    {
      "identifier": "dividedBy",
      "prototypeExpressions": [
        "21 divided by 7"
      ]
    },
    {
      "identifier": "halfOf",
      "prototypeExpressions": [
        "half of 20"
      ]
    },
    {
      "identifier": "toNearestX",
      "prototypeExpressions": [
        "56 to nearest 10",
        "16 round to nearest 10",
        "16 rounded to nearest 10"
      ]
    },
    {
      "identifier": "lesserOf",
      "prototypeExpressions": [
        "smaller of 2 and 30",
        "lesser of 2 and 30"
      ]
    },
    {
      "identifier": "greaterOf",
      "prototypeExpressions": [
        "larger of 2 and 30",
        "greater of 2 and 30"
      ]
    },
    {
      "identifier": "midpoint",
      "prototypeExpressions": [
        "midpoint between 2 and 32"
      ]
    },
    {
      "identifier": "lcm",
      "prototypeExpressions": [
        "lcm of 5 and 8",
        "lowest common multiple of 5 and 8"
      ]
    },
    {
      "identifier": "gcd",
      "prototypeExpressions": [
        "gcd of 20 and 30",
        "greatest common divisor of 5 and 8",
        "gcf of 20 and 30",
        "greatest common factor of 5 and 8"
      ]
    },
    {
      "identifier": "proportionsFindNumerator",
      "prototypeExpressions": [
        "6 is to 600 as what is to 8",
        "6 to 600 is what to 8",
        "6 to 600 as what to 8"
      ]
    },
    {
      "identifier": "proportionsFindDenominator",
      "prototypeExpressions": [
        "6 is to 600 as 8 is to what",
        "6 to 600 as 8 to what",
        "6 to 600 is 8 to what"
      ]
    },
    {
      "identifier": "makeRandomNumber",
      "prototypeExpressions": [
        "random number between 1 and 5",
        "random between 1 and 5"
      ]
    },
    {
      "identifier": "isWhatMultiplierOf",
      "prototypeExpressions": [
        "5 as multiplier of 1",
        "5 as multiple of 1",
        "5 as a multiplier of 1",
        "5 as a multiple of 1",
        "5 as x of 1",
        "5 is what x of 1",
        "5 is what multiple of 1",
        "5 is what multiplier of 1"
      ]
    },
    {
      "identifier": "isWhatMultiplierOff",
      "prototypeExpressions": [
        "5 as multiplier off 1",
        "5 as multiple off 1",
        "5 as a multiplier off 1",
        "5 as a multiple off 1",
        "5 as x off 1",
        "5 is what x off 1",
        "5 is what multiple off 1",
        "5 is what multiplier off 1"
      ]
    },
    {
      "identifier": "isWhatMultiplierOn",
      "prototypeExpressions": [
        "5 as multiplier on 1",
        "5 as multiple on 1",
        "5 as a multiplier on 1",
        "5 as a multiple on 1",
        "5 as x on 1",
        "5 is what x on 1",
        "5 is what multiple on 1",
        "5 is what multiplier on 1"
      ]
    },
    {
      "identifier": "squareRoot",
      "prototypeExpressions": [
        "square root of 100",
        "squared root of 100",
        "squared root 100",
        "square root 100"
      ]
    },
    {
      "identifier": "cubedRoot",
      "prototypeExpressions": [
        "cubed root of 100",
        "cubed root 100",
        "cube root of 100",
        "cube root 100"
      ]
    },
    {
      "identifier": "nthRoot",
      "prototypeExpressions": [
        "5 root of 100",
        "root 5 of 100"
      ]
    },
    {
      "identifier": "nthLog",
      "prototypeExpressions": [
        "log 20 base 4",
        "log of 20 to base 4",
        "log of 20 with base 4",
        "logarithm 20 base 4",
        "logarithm of 20 to base 4",
        "logarithm of 20 with base 4",
        "20 is 4 to the power of what",
        "20 is 4 to what power",
        "20 is 4 to the what"
      ]
    },
    {
      "identifier": "nthLogReversed",
      "prototypeExpressions": [
        "log base 4 of 20",
        "log 4 of 20",
        "logarithm base 4 of 20",
        "logarithm 4 of 20",
        "4 with what exponent is 20",
        "4 to what power is 20",
        "4 with what power is 20",
        "4 to what exponent is 20"
      ]
    },
    {
      "identifier": "scrubNumberWithSpecifiedRange",
      "prototypeExpressions": [
        "scrub 10 from 0 to 10",
        "scrubber 10 from 0 to 10",
        "scrub 10 between 0 and 10",
        "scrubber 10 between 0 and 10"
      ]
    }
  ],
  "geographic": [
    {
      "prototypeExpressions": [
        "gps of __timezone",
        "coordinate of __timezone",
        "coordinates of __timezone",
        "gps coordinate of __timezone",
        "gps coordinates of __timezone",
        "location of __timezone"
      ],
      "identifier": "gpsLocationOfPlace"
    },
    {
      "prototypeExpressions": [
        "longitude of __timezone",
        "longitude of __gpsLocation"
      ],
      "identifier": "longitudeOfPlace"
    },
    {
      "prototypeExpressions": [
        "latitude of __timezone",
        "latitude of __gpsLocation"
      ],
      "identifier": "latitudeOfPlace"
    }
  ],
  "changeRelated": [
    {
      "prototypeExpressions": [
        "20 after __timespan at __percentage every __timespan",
        "20 after __timespan at __percentage each __timespan",
        "20 after __timespan at __percentage per __timespan",
        "20 after __timespan at __percentage every __unit",
        "20 after __timespan at __percentage each __unit",
        "20 after __timespan at __percentage per __unit",
        "20 after __timespan at __percentage growth every __timespan",
        "20 after __timespan at __percentage growth each __timespan",
        "20 after __timespan at __percentage growth per __timespan",
        "20 after __timespan at __percentage growth every __unit",
        "20 after __timespan at __percentage growth each __unit",
        "20 after __timespan at __percentage growth per __unit"
      ],
      "identifier": "exponentialGrowth"
    },
    {
      "prototypeExpressions": [
        "20 after __timespan at âˆ’__percentage every __timespan",
        "20 after __timespan at âˆ’__percentage each __timespan",
        "20 after __timespan at âˆ’__percentage per __timespan",
        "20 after __timespan at âˆ’__percentage every __unit",
        "20 after __timespan at âˆ’__percentage each __unit",
        "20 after __timespan at âˆ’__percentage per __unit",
        "20 after __timespan at -__percentage every __timespan",
        "20 after __timespan at -__percentage each __timespan",
        "20 after __timespan at -__percentage per __timespan",
        "20 after __timespan at -__percentage every __unit",
        "20 after __timespan at -__percentage each __unit",
        "20 after __timespan at -__percentage per __unit",
        "20 after __timespan at __percentage decay every __timespan",
        "20 after __timespan at __percentage decay each __timespan",
        "20 after __timespan at __percentage decay per __timespan",
        "20 after __timespan at __percentage decay every __unit",
        "20 after __timespan at __percentage decay each __unit",
        "20 after __timespan at __percentage decay per __unit"
      ],
      "identifier": "exponentialDecay"
    },
    {
      "prototypeExpressions": [
        "time from 20 to 30 at __percentage every __timespan",
        "time from 20 to 30 at __percentage every __unit",
        "time from 20 to 30 at __percentage each __timespan",
        "time from 20 to 30 at __percentage each __unit",
        "time from 20 to 30 at __percentage per __timespan",
        "time from 20 to 30 at __percentage per __unit",
        "time from 20 to 30 at âˆ’__percentage every __timespan",
        "time from 20 to 30 at âˆ’__percentage every __unit",
        "time from 20 to 30 at âˆ’__percentage each __timespan",
        "time from 20 to 30 at âˆ’__percentage each __unit",
        "time from 20 to 30 at âˆ’__percentage per __timespan",
        "time from 20 to 30 at âˆ’__percentage per __unit",
        "time from 20 to 30 at -__percentage every __timespan",
        "time from 20 to 30 at -__percentage every __unit",
        "time from 20 to 30 at -__percentage each __timespan",
        "time from 20 to 30 at -__percentage each __unit",
        "time from 20 to 30 at -__percentage per __timespan",
        "time from 20 to 30 at -__percentage per __unit",
        "time from 20 to 30 at __percentage growth every __timespan",
        "time from 20 to 30 at __percentage growth every __unit",
        "time from 20 to 30 at __percentage growth each __timespan",
        "time from 20 to 30 at __percentage growth each __unit",
        "time from 20 to 30 at __percentage growth per __timespan",
        "time from 20 to 30 at __percentage growth per __unit",
        "time from 20 to 30 at __percentage decay every __timespan",
        "time from 20 to 30 at __percentage decay every __unit",
        "time from 20 to 30 at __percentage decay each __timespan",
        "time from 20 to 30 at __percentage decay each __unit",
        "time from 20 to 30 at __percentage decay per __timespan",
        "time from 20 to 30 at __percentage decay per __unit"
      ],
      "identifier": "timeRequiredForExponentialChange"
    },
    {
      "prototypeExpressions": [
        "growth per __timespan from 20 to 30 over __timespan",
        "decay per __timespan from 20 to 30 over __timespan",
        "growth per __unit from 20 to 30 over __timespan",
        "decay per __unit from 20 to 30 over __timespan",
        "growth each __timespan from 20 to 30 over __timespan",
        "decay each __timespan from 20 to 30 over __timespan",
        "growth each __unit from 20 to 30 over __timespan",
        "decay each __unit from 20 to 30 over __timespan",
        "growth every __timespan from 20 to 30 over __timespan",
        "decay every __timespan from 20 to 30 over __timespan",
        "growth every __unit from 20 to 30 over __timespan",
        "decay every __unit from 20 to 30 over __timespan"
      ],
      "identifier": "growthOverExponentialChange"
    },
    {
      "prototypeExpressions": [
        "10 to 20 is what %",
        "10 to 20 as %",
        "10 to 20 as a %",
        "10 to 20 is what percent",
        "10 to 20 as percent",
        "10 to 20 as a percent",
        "10 to 20 is what percentage",
        "10 to 20 as percentage",
        "10 to 20 as a percentage",
        "what % change is 10 to 20",
        "what percent change is 10 to 20",
        "what percentage change is 10 to 20"
      ],
      "identifier": "xToYIsWhatPercentage"
    },
    {
      "prototypeExpressions": [
        "10 to 20 is what x",
        "10 to 20 as x",
        "10 to 20 as a x",
        "10 to 20 is what multiple",
        "10 to 20 as multiple",
        "10 to 20 as a multiple",
        "10 to 20 is what multiplier",
        "10 to 20 as multiplier",
        "10 to 20 as a multiplier"
      ],
      "identifier": "xToYIsWhatMultiplier"
    },
    {
      "identifier": "xToY",
      "prototypeExpressions": [
        "__decimal to __decimal"
      ]
    }
  ],
  "statistics": [
    {
      "identifier": "statisticOfList",
      "prototypeExpressions": [
        "__statistic_type of __list",
        "__statistic_type __list"
      ]
    },
    {
      "identifier": "statisticOfTag",
      "prototypeExpressions": [
        "__statistic_type of __tag",
        "__statistic_type __tag",
        "__tag __statistic_type"
      ]
    }
  ],
  "percentage": [
    {
      "identifier": "percentOf",
      "prototypeExpressions": [
        "__percentage of 100"
      ]
    },
    {
      "identifier": "percentOff",
      "prototypeExpressions": [
        "__percentage off 100"
      ]
    },
    {
      "identifier": "percentOn",
      "prototypeExpressions": [
        "__percentage on 100"
      ]
    },
    {
      "identifier": "isPercentOfWhat",
      "prototypeExpressions": [
        "30 is __percentage of what"
      ]
    },
    {
      "identifier": "isPercentOfWhatClassic",
      "prototypeExpressions": [
        "__percentage of what is 30"
      ]
    },
    {
      "identifier": "isPercentOffWhat",
      "prototypeExpressions": [
        "30 is __percentage off what"
      ]
    },
    {
      "identifier": "isPercentOffWhatClassic",
      "prototypeExpressions": [
        "__percentage off what is 30"
      ]
    },
    {
      "identifier": "isPercentOnWhat",
      "prototypeExpressions": [
        "30 is __percentage on what"
      ]
    },
    {
      "identifier": "isPercentOnWhatClassic",
      "prototypeExpressions": [
        "__percentage on what is 30"
      ]
    },
    {
      "identifier": "isWhatPercentOf",
      "prototypeExpressions": [
        "10 is what % of 20",
        "10 is what percent of 20",
        "10 is what percentage of 20",
        "10 as a % of 20",
        "10 as % of 20",
        "10 as a percent of 20",
        "10 as percent of 20",
        "10 as a percentage of 20",
        "10 as percentage of 20",
        "what percent is 25 of 100",
        "what percentage is 25 of 100",
        "what % is 25 of 100"
      ]
    },
    {
      "identifier": "isWhatPercentOff",
      "prototypeExpressions": [
        "10 is what % off 20",
        "10 is what percent off 20",
        "10 is what percentage off 20",
        "10 as a % off 20",
        "10 as % off 20",
        "10 as a percent off 20",
        "10 as percent off 20",
        "10 as a percentage off 20",
        "10 as percentage off 20"
      ]
    },
    {
      "identifier": "isWhatPercentOn",
      "prototypeExpressions": [
        "20 is what % on 10",
        "20 is what percent on 10",
        "20 is what percentage on 10",
        "20 as a % on 10",
        "20 as % on 10",
        "20 as percent on 10",
        "20 as a percent on 10",
        "20 as percentage on 10",
        "20 as a percentage on 10"
      ]
    },
    {
      "identifier": "salesTaxIn",
      "prototypeExpressions": [
        "__sales_tax in 500",
        "__sales_tax of 500",
        "__sales_tax from 500"
      ]
    }
  ],
  "unitRelated": [
    {
      "identifier": "unitConversion",
      "prototypeExpressions": [
        "convert __unit_expression into __unit",
        "convert __unit into __unit"
      ]
    },
    {
      "identifier": "unitInUnitExpression",
      "prototypeExpressions": [
        "__unit in __unit_expression",
        "__unit in a __unit",
        "__unit in an __unit"
      ]
    },
    {
      "identifier": "substanceWeightToVolumeConversion",
      "prototypeExpressions": [
        "__unit_expression __substance in __unit",
        "__unit_expression of __substance in __unit",
        "__unit_expression __substance as __unit",
        "__unit_expression of __substance as __unit",
        "__unit_expression __substance to __unit",
        "__unit_expression of __substance to __unit"
      ]
    },
    {
      "identifier": "densityOfSubstance",
      "prototypeExpressions": [
        "density of __substance",
        "__substance density"
      ]
    },
    {
      "identifier": "unitInTimespan",
      "prototypeExpressions": [
        "__unit in __timespan"
      ]
    },
    {
      "prototypeExpressions": [
        "__rate is what / __unit",
        "__rate is how much / __unit",
        "__rate as / __unit",
        "__rate is what /__unit",
        "__rate is how much /__unit",
        "__rate as /__unit",
        "__rate is what per __unit",
        "__rate is how much per __unit",
        "__rate as per __unit",
        "__rate is what per__unit",
        "__rate is how much per__unit",
        "__rate as per__unit"
      ],
      "identifier": "rateUnitChange"
    },
    {
      "prototypeExpressions": [
        "__rate for a __duration"
      ],
      "identifier": "rateForADuration"
    },
    {
      "prototypeExpressions": [
        "ppi of __length at __resolution",
        "ppi of __length device at __resolution",
        "ppi of __length screen at __resolution",
        "ppi of __length display at __resolution",
        "density of __length at __resolution",
        "density of __length screen at __resolution",
        "density of __length device at __resolution",
        "density of __length display at __resolution"
      ],
      "identifier": "screenDensity"
    },
    {
      "prototypeExpressions": [
        "speed of __length tire at __angularVelocity",
        "speed of __length tyre at __angularVelocity"
      ],
      "identifier": "tyreSpeed"
    },
    {
      "prototypeExpressions": [
        "__speed_expression for __duration_expression"
      ],
      "identifier": "speedForTime"
    },
    {
      "prototypeExpressions": [
        "__power_expression at __angularVelocity_expression"
      ],
      "identifier": "powerAtRotation"
    }
  ]
}

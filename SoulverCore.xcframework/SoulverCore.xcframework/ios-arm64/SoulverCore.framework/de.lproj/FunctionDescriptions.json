{
  "percentage": [
    {
      "identifier": "percentOf",
      "prototypeExpressions": [
        "10% von 100"
      ]
    },
    {
      "identifier": "percentOff",
      "prototypeExpressions": [
        "10% off 100"
      ]
    },
    {
      "identifier": "percentOn",
      "prototypeExpressions": [
        "10% on 100"
      ]
    },
    {
      "identifier": "isPercentOfWhat",
      "prototypeExpressions": [
        "30 ist 20% von was"
      ]
    },
    {
      "identifier": "isPercentOfWhatClassic",
      "prototypeExpressions": [
        "20% von was ist 30"
      ]
    },
    {
      "identifier": "isPercentOffWhat",
      "prototypeExpressions": [
        "30 ist 20% off was"
      ]
    },
    {
      "identifier": "isPercentOffWhatClassic",
      "prototypeExpressions": [
        "20% off what is 30"
      ]
    },
    {
      "identifier": "isPercentOnWhat",
      "prototypeExpressions": [
        "30 ist 20% on was"
      ]
    },
    {
      "identifier": "isPercentOnWhatClassic",
      "prototypeExpressions": [
        "20% on what is 30"
      ]
    },
    {
      "identifier": "isWhatPercentOf",
      "prototypeExpressions": [
        "10 ist wieviel % von 20",
        "10 als % von 20"
      ]
    },
    {
      "identifier": "isWhatPercentOff",
      "prototypeExpressions": [
        "10 ist wieviel % off 20"
      ]
    },
    {
      "identifier": "isWhatPercentOn",
      "prototypeExpressions": [
        "20 ist wieviel % on 10",
        "20 sind welche % auf 10",
        "20 als % auf 10"
      ]
    }
  ],
  "general": [
    {
      "identifier": "remainder",
      "prototypeExpressions": [
        "rest von 20 durch 3",
        "rest von 20 geteilt durch 3"
      ]
    },
    {
      "identifier": "halfOf",
      "prototypeExpressions": [
        "hälfte von 20"
      ]
    },
    {
      "identifier": "lesserOf",
      "prototypeExpressions": [
        "kleinere wert von 2 und 30",
        "kleinere zahl von 2 und 30"
      ]
    },
    {
      "identifier": "greaterOf",
      "prototypeExpressions": [
        "größere wert von 2 und 30",
        "größere zahl von 2 und 30",
        "zahl von 2 und 30 ist größer",
        "welche der zahlen von 2 und 30 ist größer"
      ]
    },
    {
      "identifier": "midpoint",
      "prototypeExpressions": [
        "mitte zwischen 2 und 32"
      ]
    },
    {
      "identifier": "proportionsFindNumerator",
      "prototypeExpressions": [
        "6 ist zu 600 wie was zu 8",
        "6 verhält sich zu 600 wie was zu 8"
      ]
    },
    {
      "identifier": "proportionsFindDenominator",
      "prototypeExpressions": [
        "6 ist zu 600 wie 8 zu was",
        "6 verhält sich zu 600 wie 8 zu was"
      ]
    },
    {
      "prototypeExpressions": [
        "zufallszahl zwischen 1 und 5",
        "zufällig zwischen 1 und 5"
      ],
      "identifier": "makeRandomNumber"
    }
  ],
  "unitRelated": [
    {
      "identifier": "unitInUnitExpression",
      "prototypeExpressions": [
        "__unit in __unit_expression"
      ]
    }
  ],
  "datetime": [
    {
      "identifier": "calendarUnitBetweenDates",
      "prototypeExpressions": [
        "__unit zwischen __datestamp und __datestamp",
        "__unit zwischen dem __datestamp und dem __datestamp",
        "__unit von __datestamp bis __datestamp",
        "__unit vom __datestamp bis zum __datestamp",
        "__unit in __datestamp als __datestamp"
      ]
    },
    {
      "identifier": "calendarUnitToDate",
      "prototypeExpressions": [
        "__unit bis __datestamp",
        "__unit vor __datestamp",
        "__unit vor dem __datestamp",
        "__unit bis zum __datestamp"
      ]
    },
    {
      "identifier": "intervalBetweenDates",
      "prototypeExpressions": [
        "__datestamp bis __datestamp",
        "__datestamp bis zum __datestamp"
      ]
    },
    {
      "identifier": "intervalBetweenTimestamps",
      "prototypeExpressions": [
        "__timestamp bis __timestamp",
        "__timestamp bis zum __timestamp"
      ]
    },
    {
      "prototypeExpressions": [
        "__unit seit __datestamp",
        "__unit seit dem __datestamp"
      ],
      "identifier": "calendarUnitSinceDate"
    },
    {
      "identifier": "generateTimestamp",
      "prototypeExpressions": [
        "neuer zeitstempel"
      ]
    },
    {
      "prototypeExpressions": [
        "__timespan von __datestamp",
        "__timespan nach __datestamp"
      ],
      "identifier": "calendarUnitExpressionAfterDate"
    },
    {
      "prototypeExpressions": [
        "__timezone zeit",
        "zeit in __timezone"
      ],
      "identifier": "timeInTimezone"
    },
    {
      "prototypeExpressions": [
        "zeitdifferenz zwischen __timezone und __timezone",
        "differenz zwischen __timezone und __timezone",
        "zeitdifferenz zwischen __timezone & __timezone",
        "differenz zwischen __timezone & __timezone"
      ],
      "identifier": "differenceBetweenTimezones"
    }
  ]
}
